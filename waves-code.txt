
class WavePainter extends CustomPainter {
  final Animation<double> animation;
  final Color color;

  WavePainter({
    required this.animation,
    required this.color,
  }) : super(repaint: animation);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..shader = LinearGradient(
        begin: Alignment.topCenter,
        end: Alignment.bottomCenter,
        colors: [
          const Color(0xFF6B8DF9),
          const Color(0xFF4526F6),
        ],
      ).createShader(Offset.zero & size);

    // Draw background gradient
    canvas.drawRect(Offset.zero & size, paint);

    final wavePaint = Paint()
      ..color = Colors.white.withOpacity(0.1)
      ..style = PaintingStyle.fill;

    final path = Path();
    final path2 = Path();

    // First wave
    for (var i = 0; i < size.width; i++) {
      final x = i.toDouble();
      final sin1 = sin((x / size.width * 2 * pi) + (animation.value * 2 * pi));
      final y = sin1 * 20 + size.height * 0.2;
      if (i == 0) {
        path.moveTo(x, y);
      } else {
        path.lineTo(x, y);
      }
    }
    path.lineTo(size.width, size.height);
    path.lineTo(0, size.height);
    path.close();

    // Second wave
    for (var i = 0; i < size.width; i++) {
      final x = i.toDouble();
      final sin2 = sin((x / size.width * 2 * pi) + (animation.value * 2 * pi) + pi / 2);
      final y = sin2 * 15 + size.height * 0.3;
      if (i == 0) {
        path2.moveTo(x, y);
      } else {
        path2.lineTo(x, y);
      }
    }
    path2.lineTo(size.width, size.height);
    path2.lineTo(0, size.height);
    path2.close();

    canvas.drawPath(path, wavePaint);
    canvas.drawPath(path2, wavePaint);
  }

  @override
  bool shouldRepaint(WavePainter oldDelegate) => true;
}